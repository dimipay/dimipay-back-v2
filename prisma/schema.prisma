generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserPassword {
  id           Int    @id @default(autoincrement())
  accountName  String @unique
  passwordHash String
}

model User {
  id              Int             @id @default(autoincrement())
  systemId        String          @unique @default(dbgenerated("gen_random_uuid()"))
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  isDisabled      Boolean         @default(false)
  accountName     String          @unique
  name            String
  isTeacher       Boolean?        @default(false)
  profileImage    String?
  paymentPin      String?
  deviceUid       String?
  bioKey          String?
  phoneNumber     String?
  AdminAccount    AdminAccount?
  issuedCoupons   Coupon[]        @relation("issue")
  receivedCoupons Coupon[]        @relation("receive")
  notice          Notice[]
  paymentMethods  PaymentMethod[]
  transactions    Transaction[]
}

model PaymentMethod {
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  type        PaymentMethodType
  color       String?
  name        String?
  systemId    String            @unique @default(uuid())
  id          Int               @id @default(autoincrement())
  is_deleted  Boolean           @default(false)
  ownerSid    String
  owner       User              @relation(fields: [ownerSid], references: [systemId])
  generalCard GeneralCard?      @relation("generalCard")
  prepaidCard PrepaidCard?      @relation("prepaidCard")
  transaction Transaction[]
}

model PrepaidCard {
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  balance                  Int                        @default(0)
  id                       Int                        @id @default(autoincrement())
  systemId                 String                     @unique @default(dbgenerated("gen_random_uuid()"))
  paymentMethodSid         String                     @unique
  paymentMethod            PaymentMethod              @relation("prepaidCard", fields: [paymentMethodSid], references: [systemId])
  prepaidCardChargeHistory PrepaidCardChargeHistory[]
}

model PrepaidCardChargeHistory {
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @default(now()) @updatedAt
  delta                Int
  status               TransactionStatus
  method               String
  detailInfo           String
  id                   Int               @id @default(autoincrement())
  systemId             String            @unique @default(dbgenerated("gen_random_uuid()"))
  targetPrepaidCardSid String
  prepaidCard          PrepaidCard       @relation(fields: [targetPrepaidCardSid], references: [systemId])
}

model GeneralCard {
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  cardNumber       String
  validMonth       Int
  validYear        Int
  billingKey       String
  id               Int           @id @default(autoincrement())
  systemId         String        @unique @default(dbgenerated("gen_random_uuid()"))
  paymentMethodSid String        @unique
  paymentMethod    PaymentMethod @relation("generalCard", fields: [paymentMethodSid], references: [systemId])
}

model Coupon {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt
  name               String
  expiresAt          DateTime?
  amount             Int
  systemId           String       @unique @default(uuid())
  issuerSid          String
  receiverSid        String
  usedTransactionSid String?
  issuer             User         @relation("issue", fields: [issuerSid], references: [systemId])
  receiver           User         @relation("receive", fields: [receiverSid], references: [systemId])
  Transaction        Transaction? @relation(fields: [usedTransactionSid], references: [systemId])
}

model Transaction {
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  billingId         String?
  totalPrice        Int
  status            Transaction_status
  statusText        String?
  transactionMethod TransactionMethod
  systemId          String             @unique @default(uuid())
  id                Int                @id @default(autoincrement())
  purchaseType      PurchaseType?
  purchaseDetail    Json?
  posDeviceSid      String?
  usedCardSid       String
  userSid           String
  posDevice         PosDevice?         @relation(fields: [posDeviceSid], references: [systemId])
  paymentMethod     PaymentMethod      @relation(fields: [usedCardSid], references: [systemId])
  user              User               @relation(fields: [userSid], references: [systemId])
  coupon            Coupon[]
  productOutLog     ProductInOutLog[]
  products          Product[]
}

model Category {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  name           String
  color          String
  id             Int              @id @default(autoincrement())
  is_deleted     Boolean          @default(false)
  systemId       String           @unique @default(dbgenerated("gen_random_uuid()"))
  products       Product[]
  discountPolicy DiscountPolicy[]
}

model Product {
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @default(now()) @updatedAt
  name                    String
  barcode                 String            @unique @default(dbgenerated("gen_random_uuid()"))
  purchaseCost            Int
  sellingPrice            Int
  sellingStopped          Boolean           @default(false)
  id                      Int               @id @default(autoincrement())
  systemId                String            @unique @default(dbgenerated("gen_random_uuid()"))
  is_deleted              Boolean           @default(false)
  alias                   String?
  categorySid             String
  category                Category          @relation(fields: [categorySid], references: [systemId])
  productInOutLog         ProductInOutLog[]
  transaction             Transaction[]
  excludedDiscountPolicy  DiscountPolicy[]  @relation("discountExcludedProduct")
  targettedDiscountPolicy DiscountPolicy[]  @relation("discountTargetProduct")
}

model ProductInOutLog {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  delta          Int
  message        String?
  id             Int              @id @default(autoincrement())
  type           ProductInOutType
  unitCost       Int
  systemId       String           @unique @default(dbgenerated("gen_random_uuid()"))
  productSid     String
  storeingSid    String?
  transactionSid String?
  product        Product          @relation(fields: [productSid], references: [systemId])
  StoreProducts  StoreProducts?   @relation("storing", fields: [storeingSid], references: [systemId])
  Transaction    Transaction?     @relation(fields: [transactionSid], references: [systemId])
}

model DiscountPolicy {
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  fixedPrice      Int?
  percentRate     Int?
  id              Int        @id @default(autoincrement())
  systemId        String     @unique @default(dbgenerated("gen_random_uuid()"))
  eventSid        String?
  relatedEvent    Event?     @relation(fields: [eventSid], references: [systemId])
  targetCategory  Category[]
  excludedProduct Product[]  @relation("discountExcludedProduct")
  targetProduct   Product[]  @relation("discountTargetProduct")
}

model PosDevice {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  name        String
  disabled    Boolean       @default(false)
  is_deleted  Boolean       @default(false)
  systemId    String        @unique @default(dbgenerated("gen_random_uuid()"))
  id          Int           @id @default(autoincrement())
  transaction Transaction[]
}

model Event {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  startsAt         DateTime?
  endsAt           DateTime?
  title            String
  description      String
  url              String
  systemId         String           @unique @default(dbgenerated("gen_random_uuid()"))
  id               Int              @id @default(autoincrement())
  discountPolicies DiscountPolicy[]
}

model Notice {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  startsAt    DateTime  @default(now())
  endsAt      DateTime?
  title       String
  description String?
  url         String?
  systemId    String    @unique @default(dbgenerated("gen_random_uuid()"))
  id          Int       @id @default(autoincrement())
  authorSid   String
  author      User      @relation(fields: [authorSid], references: [systemId])
}

model AdminAccount {
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  username       String
  hashedPassword String
  description    String?
  systemId       String          @unique @default(dbgenerated("gen_random_uuid()"))
  id             Int             @id @default(autoincrement())
  relatedUserSid String?         @unique
  User           User?           @relation(fields: [relatedUserSid], references: [systemId])
  Storeing       StoreProducts[]
}

model StoreProducts {
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  id           Int               @id @default(autoincrement())
  systemId     String            @unique @default(dbgenerated("gen_random_uuid()"))
  totalCost    Int
  storeDate    DateTime          @default(now())
  title        String            @unique
  workerSid    String
  worker       AdminAccount      @relation(fields: [workerSid], references: [systemId])
  productInLog ProductInOutLog[] @relation("storing")
}

enum PaymentMethodType {
  PREPAID
  GENERAL
}

enum TransactionStatus {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum TransactionMethod {
  SMS
  APP_QR
  FACESIGN
  INAPP
}

enum PurchaseType {
  COUPON
  PRINTER
  GENERAL
}

enum Transaction_status {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum ProductInOutType {
  INCOME
  OUTCOME
}
